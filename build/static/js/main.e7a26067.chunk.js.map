{"version":3,"sources":["Component/navbar/Navbar.js","Component/image_result/ImageResult.js","Component/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","title","ImageResult","imageListContent","images","this","props","GridList","cellHeight","GridListTile","key","cols","style","height","ListSubheader","component","map","img","id","src","largeImageURL","alt","GridListTileBar","subtitle","author","actionIcon","IconButton","aria-label","Component","Search","state","searchText","amount","apiUrl","apiKey","onTextChange","e","setState","target","name","value","axios","get","then","res","data","hits","catch","err","console","log","onAmountChange","index","Fragment","onChange","fullWidth","floatingLabelText","primaryText","length","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAaeA,EAXA,WAEX,OACG,6BACH,kBAAC,IAAD,CAAQC,MAAQ,2B,2HC4CLC,G,sMAnCb,IAAIC,EACIC,EAAWC,KAAKC,MAAhBF,OA4BR,OAzBAD,EAFGC,EAIH,kBAACG,EAAA,EAAD,CAAUC,WAAY,KAChB,kBAACC,EAAA,EAAD,CAAcC,IAAI,YAAYC,KAAM,EAAGC,MAAO,CAAEC,OAAQ,SACtD,kBAACC,EAAA,EAAD,CAAeC,UAAU,OAAzB,aAEDX,EAAOY,IAAI,SAAAC,GAAG,OACb,kBAACR,EAAA,EAAD,CAAcC,IAAKO,EAAIC,IACrB,yBAAKC,IAAKF,EAAIG,cAAeC,IAAKJ,EAAIhB,QACtC,kBAACqB,EAAA,EAAD,CACErB,MAAOgB,EAAIhB,MACXsB,SAAU,qCAAWN,EAAIO,QACzBC,WACE,kBAACC,EAAA,EAAD,CAAYC,aAAA,qBAA0BV,EAAIhB,eAUpC,KAGpB,6BAAME,O,GAhCkByB,cC4CXC,E,2MAjDdC,MAAQ,CACRC,WAAW,GACXC,OAAO,GACPC,OAAO,0BACJC,OAAO,qCACV9B,OAAO,I,EAEP+B,aAAe,SAACC,GAChB,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAMH,EAAEE,OAAOE,OACxC,WACAC,IAAMC,IAAN,UAAa,EAAKZ,MAAMG,OAAxB,iBAAuC,EAAKH,MAAMI,OAAlD,cAA8D,EAAKJ,MAAMC,WAAzE,0CAC4B,EAAKD,MAAME,SACtCW,KAAK,SAAAC,GAAG,OAAI,EAAKP,SAAS,CAACjC,OAAOwC,EAAIC,KAAKC,SACxCC,MAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,Q,EAK3BG,eAAgB,SAACf,EAAEgB,EAAMZ,GACzB,EAAKH,SAAS,CAACL,OAAOQ,K,wEAGrB,OACD,kBAAC,IAAMa,SAAP,KACA,kBAAC,IAAD,CACAd,KAAO,aACPC,MAASnC,KAAKyB,MAAMC,WACjBuB,SAAUjD,KAAK8B,aAClBoB,WAAW,EACXC,kBAAmB,sBAEnB,6BACA,kBAAC,IAAD,CACAjB,KAAO,SACPC,MAASnC,KAAKyB,MAAME,OACjBsB,SAAUjD,KAAK8C,eAClBK,kBAAmB,UAEnB,kBAAC,IAAD,CAAUhB,MAAS,EAAGiB,YAAc,MACpC,kBAAC,IAAD,CAAUjB,MAAS,GAAIiB,YAAc,OACrC,kBAAC,IAAD,CAAUjB,MAAS,GAAIiB,YAAc,OACrC,kBAAC,IAAD,CAAUjB,MAAS,GAAIiB,YAAc,QAEpCpD,KAAKyB,MAAM1B,OAAOsD,OAAS,EAAK,kBAAC,EAAD,CAAatD,OAAUC,KAAKyB,MAAM1B,SAAY,U,GA5C3DuD,IAAM/B,W,kBCYZgC,E,iLAZb,OACE,yBAAKC,UAAU,OAEb,kBAAC,IAAD,KACI,kBAAC,EAAD,MACE,kBAAC,EAAD,Y,GAPMF,IAAM/B,WCOJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.e7a26067.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport AppBar from 'material-ui/AppBar'\r\nconst Navbar = () =>{\r\n\r\n    return(\r\n       <div>\r\n    <AppBar title = \"Pixabay Image Finder\" />\r\n       </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Navbar;","import React,{Component} from 'react'\r\nimport Proptypes from 'prop-types'\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton  from 'material-ui/FlatButton';\r\n\r\n\r\nclass ImageResult extends Component{\r\n\trender(){\r\n\t\tlet imageListContent;\r\n\t\tconst { images } = this.props;\r\n\t\tif(images){\r\n\t    //if images is true \r\n\t\timageListContent = (\r\n\t    //Whenever You Want To return An Html Document You will use a Bracket like the one Above \r\n\t\t<GridList cellHeight={180}>\r\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n          <ListSubheader component=\"div\">December</ListSubheader>\r\n        </GridListTile>\r\n        {images.map(img => (\r\n          <GridListTile key={img.id}>\r\n            <img src={img.largeImageURL} alt={img.title} />\r\n            <GridListTileBar\r\n              title={img.title}\r\n              subtitle={<span>by: {img.author}</span>}\r\n              actionIcon={\r\n                <IconButton aria-label={`info about ${img.title}`}>\r\n                \r\n                </IconButton>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n\t\t)\t\r\n\t\t}else{\r\n\t\t\timageListContent = null;\r\n\t\t}\r\n\t\treturn(\r\n\t\t<div>{imageListContent}</div>\r\n\t\t);\r\n\t}\r\n}\r\n\t\r\nexport default ImageResult;","import React from 'react'\r\nimport TextField from 'material-ui/TextField'\r\nimport SelectField from 'material-ui/SelectField'\r\nimport MenuItem from 'material-ui/MenuItem'\r\nimport axios from 'axios'\r\nimport ImageResult from './../image_result/ImageResult'\r\n\r\nclass Search extends React.Component{\r\n\tstate = {\r\n\tsearchText:'',\r\n\tamount:15,\r\n\tapiUrl:'https://pixabay.com/api',\r\n    apiKey:'13483309-fc31653c242105ef3549e459e',\r\n\timages:[]\r\n\t}\r\n\tonTextChange = (e)=>{\r\n\tthis.setState({[e.target.name]:e.target.value},\r\n\t()=>{\r\n\taxios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&\r\n\timage_type=photo&per_page=${this.state.amount}`)\r\n\t.then(res => this.setState({images:res.data.hits}))\r\n    .catch(err=>console.log(err));\r\n\t}\r\n\t);\r\n\t\r\n\t}\r\n\tonAmountChange =(e,index,value) =>{\r\n\tthis.setState({amount:value})\t\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t<React.Fragment>\r\n\t<TextField \r\n\tname = \"searchText\" \r\n\tvalue = {this.state.searchText}\r\n    onChange={this.onTextChange}\t\r\n\tfullWidth={true} \r\n\tfloatingLabelText =\"Search For Images\"\r\n\t/>\r\n\t<br/>\r\n\t<SelectField\r\n\tname = \"amount\"\r\n\tvalue = {this.state.amount}\r\n    onChange={this.onAmountChange}\t \r\n\tfloatingLabelText =\"Amount\"\r\n\t>\r\n\t<MenuItem value = {5} primaryText = \"5\" />\r\n\t<MenuItem value = {10} primaryText = \"10\" />\r\n\t<MenuItem value = {15} primaryText = \"15\" />\r\n\t<MenuItem value = {20} primaryText = \"20\" />\r\n\t</SelectField>\r\n\t{this.state.images.length > 0 ? (<ImageResult images = {this.state.images} />):null}\r\n\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n\t\r\n}\r\nexport default Search;","import React from 'react';\nimport './App.css';\nimport Navbar from './Component/navbar/Navbar';\nimport Search from './Component/search/Search';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nclass App extends React.Component{\n    render(){\n  return (\n    <div className=\"App\">\n      \n      <MuiThemeProvider>\n          <Navbar />\n            <Search />\n      </MuiThemeProvider>\n      </div>\n\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}